---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
	</head>

	<body>
		<Header />
		<main>
			<article>
				{heroImage && (
					<div class="hero-image">
						<img src={heroImage} alt="" />
					</div>
				)}
				
				<div class="content">
					<header class="article-header">
						<div class="article-meta">
							<time class="mono">
								<FormattedDate date={pubDate} />
							</time>
							{updatedDate && (
								<time class="mono updated">
									Updated: <FormattedDate date={updatedDate} />
								</time>
							)}
						</div>
						<h1 class="article-title">{title}</h1>
						<div class="divider"></div>
					</header>
					
					<div class="prose">
						<slot />
					</div>
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>

<style>
	article {
		max-width: 100%;
	}

	.hero-image {
		width: 100%;
		margin-bottom: var(--space-2xl);
	}

	.hero-image img {
		width: 100%;
		height: 60vh;
		object-fit: cover;
		filter: grayscale(30%);
	}

	.article-header {
		margin-bottom: var(--space-2xl);
	}

	.article-meta {
		display: flex;
		gap: var(--space-lg);
		margin-bottom: var(--space-lg);
	}

	.article-meta time {
		font-size: 0.875rem;
		color: var(--gray-400);
		letter-spacing: 0.1em;
	}

	.article-meta .updated {
		color: var(--gray-500);
	}

	.article-title {
		margin: 0 0 var(--space-lg) 0;
		line-height: 1.1;
		max-width: 20ch;
	}

	.prose {
		max-width: 65ch;
	}

	.prose :global(h2) {
		margin-top: var(--space-2xl);
		margin-bottom: var(--space-lg);
		font-size: 1.75rem;
		font-weight: 400;
		text-transform: uppercase;
		letter-spacing: 0.02em;
	}

	.prose :global(h3) {
		margin-top: var(--space-xl);
		margin-bottom: var(--space-md);
		font-size: 1.25rem;
		font-weight: 700;
	}

	.prose :global(p) {
		color: var(--gray-200);
		line-height: 1.7;
		margin-bottom: var(--space-lg);
	}

	.prose :global(blockquote) {
		border-left: 2px solid var(--white);
		padding-left: var(--space-lg);
		margin: var(--space-xl) 0;
		font-style: italic;
		color: var(--gray-300);
		font-size: 1.125rem;
	}

	.prose :global(code) {
		font-family: var(--font-mono);
		background: var(--gray-900);
		color: var(--gray-200);
		padding: var(--space-xs) var(--space-sm);
		border: 1px solid var(--gray-800);
		font-size: 0.875rem;
	}

	.prose :global(pre) {
		background: var(--gray-900);
		border: 1px solid var(--gray-800);
		padding: var(--space-lg);
		overflow-x: auto;
		margin: var(--space-lg) 0;
	}

	.prose :global(pre code) {
		background: none;
		border: none;
		padding: 0;
	}

	.prose :global(ul),
	.prose :global(ol) {
		margin: var(--space-lg) 0;
		padding-left: var(--space-lg);
	}

	.prose :global(li) {
		color: var(--gray-200);
		margin-bottom: var(--space-sm);
	}

	.prose :global(a) {
		color: var(--white);
		border-bottom: 1px solid var(--gray-600);
		transition: border-color 0.2s ease;
	}

	.prose :global(a:hover) {
		border-bottom-color: var(--white);
	}

	.prose :global(img) {
		width: 100%;
		height: auto;
		margin: var(--space-xl) 0;
		filter: grayscale(20%);
	}

	@media (max-width: 768px) {
		.hero-image img {
			height: 40vh;
		}

		.article-meta {
			flex-direction: column;
			gap: var(--space-sm);
		}
	}
</style>
